const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const CssMinimizerPlugin = require("css-minimizer-webpack-plugin");
const RemoveEmptyScriptsPlugin = require('webpack-remove-empty-scripts');
const path = require('path');

week="week2";

module.exports = {
  entry: {
    'product-list': `./${week}/src/css/product-list.scss`,
    product: `./${week}/src/css/product.scss`,
  },
  output: {
    filename: '[name].js',
    // filename: '[name].[contenthash].js',
    path: path.resolve(__dirname, `./${week}/dist`),
    clean: true,
  },
  module: {
    rules: [
      {
        test: /\.(sa|sc|c)ss$/,
        use: [MiniCssExtractPlugin.loader, "css-loader", "sass-loader"],
      },
    ],
  },
  plugins: [
    // removes the empty `.js` files generated by webpack
    new RemoveEmptyScriptsPlugin(),
    new MiniCssExtractPlugin({
      filename: '[name].css'
      // filename: '[name].[contenthash].css'
    }),
    new HtmlWebpackPlugin({
      filename: "product-list.html",
      template: `./${week}/src/product-list.html`,
      title: "產品列表頁",
      chunks: ['product-list']
    }),
    new HtmlWebpackPlugin({
      filename: "product.html",
      template: `./${week}/src/product.html`,
      title: "產品詳情頁",
      chunks: ['product']
    }),
  ],
  optimization: {
    minimizer: [
      // For webpack v5, you can use the `...` syntax to extend existing minimizers (i.e. `terser-webpack-plugin`), uncomment the next line // `...`,
      new CssMinimizerPlugin(),
    ],
  },
};