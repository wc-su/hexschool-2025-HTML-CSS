@use 'sass:math';
@use '../abstracts/variables' as var;
@use '../abstracts/mixin' as mixin;

@mixin generate-cols($cols: 12) {
  .row > .col {
    padding-left: var.$grid-gutter-width * 0.5;
    padding-right: var.$grid-gutter-width * 0.5;
  }
  .row > .col-auto {
    padding-left: var.$grid-gutter-width * 0.5;
    padding-right: var.$grid-gutter-width * 0.5;
  }
  .col {
    flex: 1 0 0;
  }
  .col-auto {
    flex: 0 0 auto;
    width: auto;
  }

  @for $i from 1 through $cols {
    .row > .col-#{$i} {
      padding-left: var.$grid-gutter-width * 0.5;
      padding-right: var.$grid-gutter-width * 0.5;
    }
    .col-#{$i} {
      flex: 0 0 auto;
      width: math.percentage(math.div($i, $cols));
    }
  }

}

@mixin generate-gutter-cols($cols: 12) {
  @each $name, $px in var.$gutters {
    .gx-#{$name}.row {
      margin-left: -$px;
      margin-right: -$px;
    }
    .gx-#{$name} > .col {
      padding-left: $px;
      padding-right: $px;
    }
    .gx-#{$name} > .col-auto {
      padding-left: $px;
      padding-right: $px;
    }
    .gx-#{$name} > .col-md {
      padding-left: $px;
      padding-right: $px;
    }
    .gx-#{$name} > .col-md-auto {
      padding-left: $px;
      padding-right: $px;
    }
    @for $i from 1 through $cols {
      .gx-#{$name} > .col-#{$i} {
        padding-left: $px;
        padding-right: $px;
      }
      .gx-#{$name} > .col-md-#{$i} {
        padding-left: $px;
        padding-right: $px;
      }
    }
  }
}

@mixin generate-cols-md($cols: 12) {
  @include mixin.max-width-mobile {
    .row > .col-md {
      padding-left: var.$grid-gutter-width * 0.5;
      padding-right: var.$grid-gutter-width * 0.5;
    }
    .col-md {
      flex: 1 0 0;
    }
    .col-md-auto {
      flex: 0 0 auto;
      width: auto;
    }

    @for $i from 1 through $cols {
      .row > .col-md-#{$i} {
        padding-left: var.$grid-gutter-width * 0.5;
        padding-right: var.$grid-gutter-width * 0.5;
      }
      .col-md-#{$i} {
        flex: 0 0 auto;
        width: math.percentage(math.div($i, $cols));
      }
    }
  }
}

@mixin generate-gutter-cols-md($cols: 12) {
  @include mixin.max-width-mobile {
    @each $name, $px in var.$gutters {
      .gx-md-#{$name}.row {
        margin-left: -$px;
        margin-right: -$px;
      }
      .gx-md-#{$name} > .col {
        padding-left: $px;
        padding-right: $px;
      }
      .gx-md-#{$name} > .col-auto {
        padding-left: $px;
        padding-right: $px;
      }
      .gx-md-#{$name} > .col-md {
        padding-left: $px;
        padding-right: $px;
      }
      .gx-md-#{$name} > .col-md-auto {
        padding-left: $px;
        padding-right: $px;
      }
      @for $i from 1 through $cols {
        .gx-md-#{$name} > .col-#{$i} {
          padding-left: $px;
          padding-right: $px;
        }
        .gx-md-#{$name} > .col-md-#{$i} {
          padding-left: $px;
          padding-right: $px;
        }
      }
    }
  }
}

.row {
  margin-right: var.$grid-gutter-width * -0.5;
  margin-left: var.$grid-gutter-width * -0.5;
  display: flex;
  flex-wrap: wrap;
}

@include generate-cols();
@include generate-cols-md();
@include generate-gutter-cols();
@include generate-gutter-cols-md();
